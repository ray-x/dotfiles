set encoding=utf-8
if has('nvim')
  let s:config_home = stdpath('config')
else
  let s:config_home = '~/.config/nvim'
endif

" Set python/ruby interpreter path

if has('mac')
  let s:brew_prefix = '/usr/local'
elseif executable('brew')
  let s:brew_prefix = systemlist('brew --prefix')[0]
endif

call plug#begin('~/.vim/plugged')

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

Plug 'Chiel92/vim-autoformat'

" Group dependencies, vim-snippets depends on ultisnips
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

Plug 'ryanoasis/vim-devicons'

Plug 'liuchengxu/vista.vim'

" Javascript
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'leafgarland/typescript-vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install',
  \ 'branch': 'release/1.x',
  \ 'for': [
    \ 'javascript',
    \ 'typescript',
    \ 'css',
    \ 'less',
    \ 'scss',
    \ 'json',
    \ 'graphql',
    \ 'markdown',
    \ 'vue',
    \ 'lua',
    \ 'php',
    \ 'python',
    \ 'ruby',
    \ 'html',
    \ 'swift' ] }

Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'HerringtonDarkholme/yats.vim'

Plug 'mlaursen/vim-react-snippets'

Plug 'voldikss/vim-floaterm'

Plug 'skywind3000/asynctasks.vim'
Plug 'skywind3000/asyncrun.vim'

" language support
" Plug 'sheerun/vim-polyglot'  " incase the language is not well defined in syntax use this plugin"
Plug 'octol/vim-cpp-enhanced-highlight', { 'for': ['c', 'cpp']}  "C++ 11/14
" Plug 'nvim-treesitter/nvim-treesitter'
Plug 'lifepillar/pgsql.vim'

" HTML
Plug 'mattn/emmet-vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'groenewege/vim-less'
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-surround'
Plug 'othree/html5.vim'

Plug 'vim-scripts/indentpython.vim', { 'for': 'py' }

Plug 'preservim/nerdcommenter'  " add comments to code, 
" tomtom/tcomment_vim is another alternative

" Plug 'Valloric/YouCompleteMe', { 'for': ['c', 'cpp', 'py'],  'do': './install.py  --clangd-completer  --clang-tidy' }
if has('nvim')
  Plug 'Valloric/YouCompleteMe', { 'for': ['c', 'cpp', 'py']}
else
  Plug 'Valloric/YouCompleteMe', { 'for': ['c', 'cpp', 'py'],  'do': './install.py  --clangd-completer --clang-tidy' }
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'rdnetto/YCM-Generator', { 'for': ['c', 'cpp', 'py'] , 'branch': 'stable' }


Plug 'mhinz/vim-startify'

" theme
Plug 'ray-x/paleaurora'
Plug 'joshdick/onedark.vim'
Plug 'haishanh/night-owl.vim'  "nice, but can not configure...
Plug 'liuchengxu/space-vim-dark'    " blue style
Plug 'kaicataldo/material.vim'
Plug 'NLKNguyen/papercolor-theme'     "" one will need at least a light color, ayu-vim light is another option
Plug 'morhetz/gruvbox'
Plug 'fenetikm/falcon'


if executable('swift')
    Plug 'keith/swift.vim'
endif


Plug 'christoomey/vim-tmux-navigator'


" markdown 插件
Plug 'iamcco/mathjax-support-for-mkdp'  "math support
Plug 'iamcco/markdown-preview.vim'
Plug 'plasticboy/vim-markdown'

"  Aligning Text with Tabular.vim  :Tabularize  or \=
Plug 'godlygeek/tabular'

Plug 'sedm0784/vim-you-autocorrect'

if executable('py')
    Plug 'nvie/vim-flake8'
    Plug 'zchee/deoplete-jedi'
endif

Plug 'fatih/vim-go', { 'for': ['go','gomod'] , 'do': ':GoInstallBinaries' }

Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'vn-ki/coc-clap'

"Plug 'Shougo/deoplete.nvim', { 'for': ['py'] , 'do': ':UpdateRemotePlugins' }
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" asynchronous supprot or vim"
Plug 'Shougo/vimproc.vim', { 'do': 'make' }
Plug 'Shougo/echodoc.vim'
Plug 'tenfyzhong/CompleteParameter.vim'

Plug 'Lokaltog/vim-powerline'

Plug 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim'  "git commit browser. :GV(!|?) move: ]]/ [[

" async linter
Plug 'w0rp/ale'

Plug 'HerringtonDarkholme/yats.vim' " TS Syntax


" Plug 'ludovicchabant/vim-gutentags'  "also used in eleline
" need gotags
Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' },
Plug 'jstemmer/gotags'
Plug 'skywind3000/gutentags_plus', { 'for': ['c', 'cpp']}

Plug 'vim-test/vim-test'
Plug 'neomake/neomake'

Plug 'zefei/vim-wintabs',
Plug 'zefei/vim-wintabs-powerline',
" also can use vim-buffet/buftabline plugin for tab

Plug 'skywind3000/vim-quickui' " replace vim-preview

Plug 'liuchengxu/eleline.vim'
" Motion
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-repeat' " repead motion"
Plug 'bkad/CamelCaseMotion'

Plug 'pseewald/vim-anyfold'   " function folding

Plug 'liuchengxu/vim-clap'   " keep the binary for a while. download and rebuild took time
" Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }
" Plug 'Shougo/denite.nvim', { 'do': ':UpdateRemotePlugins' }

Plug 'simnalamburt/vim-mundo'

"Rainbow Parentheses Improved"
Plug 'luochen1990/rainbow'

" Show color
Plug 'norcalli/nvim-colorizer.lua'

" for pager
Plug 'norcalli/nvim-terminal.lua'

" display the indention levels with thin vertical lines
Plug 'Yggdroot/indentLine'
Plug 'mtdl9/vim-log-highlighting'
if has('nvim')
    Plug 'sslivkoff/vim-scroll-barnacle', { 'on': 'ScrollbarOff' },
endif
" highlight current session
Plug 'junegunn/Limelight.vim'
" highlight current word
Plug 'ray-x/vim-interestingwords'

Plug 'roxma/vim-hug-neovim-rpc'
" Add plugins to &runtimepath

call plug#end()


autocmd StdinReadPre * let s:std_in=1


""""""""""""""""""""""
"      Settings      "
""""""""""""""""""""""
set nocompatible                " Enables us Vim specific features
filetype off                    " Reset filetype detection first ...
filetype plugin indent on       " ... and enable filetype detection
set ttyfast                     " Indicate fast terminal conn for faster redraw
set laststatus=2                " Show status line always
set encoding=utf-8              " Set default encoding to UTF-8
set autoindent                  " Enabile Autoindent
set backspace=indent,eol,start  " Makes backspace key more powerful.
set incsearch                   " Shows the match while typing
set hlsearch                    " Highlight found searches
set noerrorbells                " No beeps
set number                      " Show line numbers
set showcmd                     " Show me what I'm typing
set noswapfile                  " Don't use swapfile
set nobackup                    " Don't create annoying backup files
set splitright                  " Vertical windows should be split to right
set splitbelow                  " Horizontal windows should split to bottom
set autowrite                   " Automatically save before :next, :make etc.
set hidden                      " Buffer should still exist if window is closed
set fileformats=unix,dos,mac    " Prefer Unix over Windows over OS 9 formats
set noshowmatch                 " Do not show matching brackets by flickering
set noshowmode                  " We show the mode with airline or lightline
set ignorecase                  " Search case insensitive...
set smartcase                   " ... but not it begins with upper case
set completeopt=menu,menuone    " Show popup menu, even if there is one entry
set pumheight=12                " Completion window max size
" set nocursorcolumn              " (turn off to speeds up highlighting)
set nocursorline                " (turn off speeds up highlighting)
set lazyredraw                  " Wait to redraw
set autoread                    " Automatically read changed files
au FocusGained,BufEnter * :checktime  " autoload



if !has('nvim')
  set ttyscroll=3                 " Speedup scrolling
  set ttymouse=xterm2
endif
if exists(':tnoremap')
  tnoremap <Esc> <C-\><C-n>
endif

" file hidden
set wildmenu
set wildmode=longest:full,full
set wildignore+=**/node_modules/**,/node_modules/*,*/tmp/*,*.so,*.swp,*.zip
if has('nvim')
  set wildoptions=pum
endif

" set UTF-8 encoding
set enc=utf-8
set fenc=utf-8
set termencoding=utf-8
" disable vi compatibility (emulation of old bugs)
set nocompatible
" use indentation of previous line
set autoindent
" use intelligent indentation for C
set smartindent
" configure tabwidth and insert spaces instead of tabs
set tabstop=4        " tab width is 4 spaces
set shiftwidth=4     " indent also with 4 spaces
set expandtab        " expand tabs to spaces

set numberwidth=3
set cpoptions+=n                " use the number column for the text of wrapped lines

" list of files use two space as tab
autocmd FileType javascript,vim,yml,markdown setlocal ts=2 sts=2 sw=2

" wrap lines at 120 chars. 80 is somewaht antiquated with nowadays displays.
set textwidth=120
" turn syntax highlighting on
syntax on
set fdm=syntax
" turn line numbers on
set number
" highlight matching braces
set showmatch
" intelligent comments
set comments=sl:/*,mb:\ *,elx:\ */


syntax on
set updatetime=300 "Vim waits after you stop typing before it triggers the plugin is governed by the setting updatetime


" yank
augroup highlight_yank
    autocmd!
    autocmd TextYankPost * silent! lua require'vim.highlight'.on_yank("IncSearch", 1000)
augroup END




" This enables us to undo files even if you exit Vim.
if has('persistent_undo')
  set undofile
  set undodir=~/.config/vim/tmp/undo//
endif

