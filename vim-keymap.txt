

copy the cmd output
redir @* | echo &guifont | redir END


copy/paste and repeat

yiw  copy word, yi"  copy inner 

ciw ^R0   (change word with register 0)

.  (repete)

Line:
Vp select 2nd line, replace with yank
V"0p  3rd line and replace with 1st

word count g^g

comments:
[count]<leader>cc |NERDCommenterComment|

Comment out the current line or text selected in visual mode.

[count]<leader>cn |NERDCommenterNested|

Same as cc but forces nesting.

[count]<leader>c<space> |NERDCommenterToggle|

Toggles the comment state of the selected line(s). If the topmost selected line is commented, all selected lines are uncommented and vice versa.

[count]<leader>cm |NERDCommenterMinimal|

Comments the given lines using only one set of multipart delimiters.

[count]<leader>ci |NERDCommenterInvert|

Toggles the comment state of the selected line(s) individually.

[count]<leader>cs |NERDCommenterSexy|

Comments out the selected lines with a pretty block formatted layout.

[count]<leader>cy |NERDCommenterYank|

Same as cc except that the commented line(s) are yanked first.

<leader>c$ |NERDCommenterToEOL|

Comments the current line from the cursor to the end of line.

<leader>cA |NERDCommenterAppend|

Adds comment delimiters to the end of line and goes into insert mode between them.

|NERDCommenterInsert|

Adds comment delimiters at the current cursor position and inserts between. Disabled by default.

<leader>ca |NERDCommenterAltDelims|

Switches to the alternative set of delimiters.

[count]<leader>cl |NERDCommenterAlignLeft [count]<leader>cb |NERDCommenterAlignBoth

Same as |NERDCommenterComment| except that the delimiters are aligned down the left side (<leader>cl) or both sides (<leader>cb).

[count]<leader>cu |NERDCommenterUncomment|

Uncomments the selected line(s).


:execute "normal \<Plug>NiceCenterCursor"


execute "normal \<Plug>CamelCaseMotion_iw"

" highlight"
echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"


replace with clipboard

ciw^r0 (yiw if not in first char)  and then repeat with .

search and replace 
args `grep Neovim -l -r .` or args `rg Neovim -l`

argdo %s/Neovim/Nvim/ge | update

set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
set grepformat=%f:%l:%c:%m
grep whatever
cfdo %s/Neovim/Nvim/ge | update


:grep -r -l 'foo'
:cfdo %s/foo/bar/g|w

cfdo %s/float_win/floating_win/gc|w

cfdo %s/floating_win/float_win/gc|w


How to see which plugins are making Vim slow?
You can use built-in profiling support: after launching vim do

:profile start profile.log
:profile func *
:profile file *
" At this point do slow actions
:profile pause
:noautocmd qall!
"startup time"
vim --startuptime timeCost.txt timeCost.txt


"log all event"

Building on the answers that suggest using Vp or VP to paste over a line -- to avoid changing the contents of the yank register I find the most ergonomic command is simply:

VPY


debug vim profile
https://codeinthehole.com/tips/debugging-vim-by-example/#why-is-action-slow

change file type hl `set ft=json`
wc in visual   g<C>g
python prettier    :%!jq    (%! means use file as stdin)

repeat 
@@
.

command history:    q:
If you always want to use the command editing window, try these mappings:

nnoremap : q:i
nnoremap / q/i
nnoremap ? q?i

Using "finish" stops Vim from reading the rest of the file, it's much quicker
than using if-endif around the whole file.

https://google.github.io/styleguide/vimscriptfull.xml
let [s:plugin, s:enter] = maktaba#plugin#Enter(expand('<sfile>:p'))
if !s:enter
  finish
endif