font_family      Fira Code Retina
italic_font      Victor Mono Italic
bold_font        JetBrains Mono Bold
bold_italic_font JetBrains Mono ExtraBold Italic
# check result with:  echo -e "\nnormal flower\n\e[1mboldflower\e[0m\n\e[3mitalic flower\e[0m\n\e[3m\e[1mbold italic flower\e[0m\n\e[4munderline flower\e[0m\n\e[9mstrikethrough flower\e[0m\n\e[4:3mcurly underline flower\e[4:0m\n\e[4:3\e[58:mcurlyunderlinewithcolor flower\e[59m\e[4:0m"
# Font size (in pts)
font_size        14.0
adjust_line_height  0
adjust_column_width -1

include ./theme.conf
background_opacity 0.96

# The cursor shape can be one of (block, beam, underline)
# cursor_shape     block

# The interval (in seconds) at which to blink the cursor. Set to zero to
# disable blinking.
cursor_blink_interval     0.5

# Stop blinking cursor after the specified number of seconds of keyboard inactivity. Set to
# zero or a negative number to never stop blinking.
cursor_stop_blinking_after 15.0

# Number of lines of history to keep in memory for scrolling back
scrollback_lines 4000

# Program with which to view scrollback in a new window. The scrollback buffer is passed as
# STDIN to this program. If you change it, make sure the program you use can
# handle ANSI escape sequences for colors and text formatting.
# scrollback_pager neovim
# scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER
scrollback_pager /usr/local/Cellar/neovim/0.4.3/bin/nvim   -c 'set ft=terminal' -

# Wheel scroll multiplier (modify the amount scrolled by the mouse wheel)
wheel_scroll_multiplier 5.0

# The interval between successive clicks to detect double/triple clicks (in seconds)
click_interval 0.5

# Characters considered part of a word when double clicking. In addition to these characters
# any character that is marked as an alpha-numeric character in the unicode
# database will be matched.
select_by_word_characters :@-./_~?&=%+#

# Hide mouse cursor after the specified number of seconds of the mouse not being used. Set to
# zero or a negative number to disable mouse cursor hiding.
mouse_hide_wait 0.0

# The enabled window layouts. A comma separated list of layout names. The special value * means
# all layouts. The first listed layout will be used as the startup layout.
# For a list of available layouts, see the file layouts.py
enabled_layouts splits:split_axis=horizontal

# If enabled, the window size will be remembered so that new instances of kitty will have the same
# size as the previous instance. If disabled, the window will initially have size configured
# by initial_window_width/height, in pixels.
remember_window_size   yes
initial_window_width   1440
initial_window_height  864

# Delay (in milliseconds) between screen updates. Decreasing it, increases fps
# at the cost of more CPU usage. The default value yields ~100fps which is more
# that sufficient for most uses.
# repaint_delay    10
repaint_delay    10

# Delay (in milliseconds) before input from the program running in the terminal
# is processed. Note that decreasing it will increase responsiveness, but also
# increase CPU usage and might cause flicker in full screen programs that
# redraw the entire screen on each loop, because kitty is so fast that partial
# screen updates will be drawn.
input_delay 3

# Visual bell duration. Flash the screen when a bell occurs for the specified number of
# seconds. Set to zero to disable.
visual_bell_duration 0.0

# Enable/disable the audio bell. Useful in environments that require silence.
enable_audio_bell yes

# The modifier keys to press when clicking with the mouse on URLs to open the URL
open_url_modifiers ctrl+shift

# The program with which to open URLs that are clicked on. The special value "default" means to
# use the operating system's default URL handler.
open_url_with default

# The value of the TERM environment variable to set
# term xterm-kitty
# term kitty
# term xterm-256color

# The width (in pts) of window borders. Will be rounded to the nearest number of pixels based on screen resolution.

window_margin_width 0.0

window_border_width 0.5

window_margin_width 0.1

window_padding_width 0
draw_minimal_borders yes


# The color for the border of the active window
active_border_color #efefef

# The color for the border of inactive windows
inactive_border_color #7c7c7c

# Tab-bar colors
active_tab_foreground #000
active_tab_background #eee
inactive_tab_foreground #444
inactive_tab_background #999

macos_hide_from_tasks no
macos_quit_when_last_window_closed yes


# Key mapping
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html
# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.

kitty_mod super

map f1 launch vim path/to/some/file

clear_all_shortcuts yes
map kitty_mod+c copy_to_clipboard

#: There is also a copy_or_interrupt action that can be optionally
#: mapped to Ctrl+c. It will copy only if there is a selection and
#: send an interrupt otherwise. Similarly, copy_and_clear_or_interrupt
#: will copy and clear the selection or send an interrupt if there is
#: no selection.

map kitty_mod+v  paste_from_clipboard
map kitty_mod+s  paste_from_selection
map shift+insert paste_from_selection
map kitty_mod+o  pass_selection_to_program

#: You can also pass the contents of the current selection to any
#: program using pass_selection_to_program. By default, the system's
#: open program is used, but you can specify your own, the selection
#: will be passed as a command line argument to the program, for
#: example::

#:     map kitty_mod+o pass_selection_to_program firefox

#: You can pass the current selection to a terminal program running in
#: a new kitty window, by using the @selection placeholder::

#:     map kitty_mod+y new_window less @selection

#: }}}

#: Scrolling {{{

map kitty_mod+up        scroll_line_up
map kitty_mod+k         scroll_line_up
map kitty_mod+down      scroll_line_down
map kitty_mod+j         scroll_line_down
map kitty_mod+page_up   scroll_page_up
map kitty_mod+page_down scroll_page_down
map kitty_mod+home      scroll_home
map kitty_mod+end       scroll_end
map kitty_mod+shift+f3  show_scrollback
map kitty_mod+shift+h   launch --stdin-source=@screen_scrollback --stdin-add-formatting --copy-colors --type=tab --title="scrollback search" /usr/local/bin/nvim -c "setl filetype=terminal" -
# map kitty_mod+shift+h   launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay /usr/local/bin/vim -c "normal G" -c "set nonumber nolist" -

#: You can pipe the contents of the current screen + history buffer as
#: STDIN to an arbitrary program using the ``launch`` function. For
#: example, the following opens the scrollback buffer in less in an
#: overlay window::

#:     map f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R

#: For more details on piping screen and buffer contents to external
#: programs, see launch.

#: }}}

#: Window management {{{

map kitty_mod+enter new_window

#: You can open a new window running an arbitrary program, for
#: example::

#:     map kitty_mod+y      launch mutt

#: You can open a new window with the current working directory set to
#: the working directory of the current window using::

#:     map ctrl+alt+enter    launch --cwd=current

#: You can open a new window that is allowed to control kitty via the
#: kitty remote control facility by prefixing the command line with @.
#: Any programs running in that window will be allowed to control
#: kitty. For example::

#:     map ctrl+enter launch --allow-remote-control some_program

#: You can open a new window next to the currently active window or as
#: the first window, with::

#:     map ctrl+n launch --location=neighbor some_program
#:     map ctrl+f launch --location=first some_program

#: For more details, see launch.

map kitty_mod+n new_os_window_with_cwd

#: Works like new_window above, except that it opens a top level OS
#: kitty window. In particular you can use new_os_window_with_cwd to
#: open a window with the current working directory.



map kitty_mod+F4 launch --cwd=current --location=hsplit
map kitty_mod+F6 launch --cwd=current --location=vsplit
map kitty_mod+F7 layout_action rotate

map kitty_mod+shift+up move_window up
map kitty_mod+shift+left move_window left
map kitty_mod+shift+right move_window right
map kitty_mod+shift+down move_window down

map kitty_mod+ctrl+left neighboring_window left
map kitty_mod+ctrl+right neighboring_window right
map kitty_mod+ctrl+up neighboring_window up
map kitty_mod+ctrl+down neighboring_window down

map kitty_mod+w close_window
map kitty_mod+] next_window
map kitty_mod+[ previous_window
map kitty_mod+f move_window_forward
map kitty_mod+b move_window_backward
#map kitty_mod+` move_window_to_top
map kitty_mod+r start_resizing_window
#map kitty_mod+1 first_window
#map kitty_mod+2 second_window
#map kitty_mod+3 third_window
#map kitty_mod+4 fourth_window
#map kitty_mod+5 fifth_window
#map kitty_mod+6 sixth_window
#map kitty_mod+7 seventh_window
#map kitty_mod+8 eighth_window
#map kitty_mod+9 ninth_window
#map kitty_mod+0 tenth_window
#: }}}

#: Tab management {{{

map kitty_mod+right next_tab
map kitty_mod+left  previous_tab
map kitty_mod+t     new_tab_with_cwd
map kitty_mod+q     close_tab
map kitty_mod+.     move_tab_forward
map kitty_mod+,     move_tab_backward
map kitty_mod+alt+t set_tab_title

#: You can also create shortcuts to go to specific tabs, with 1 being
#: the first tab, 2 the second tab and -1 being the previously active
#: tab, and any number larger than the last tab being the last tab::

#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2

#: Just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and use
#: new_tab_with_cwd. Finally, if you want the new tab to open next to
#: the current tab rather than at the end of the tabs list, use::

#:     map ctrl+t new_tab !neighbor [optional cmd to run]
#: }}}

#: Layout management {{{

map kitty_mod+l next_layout

#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:    map ctrl+alt+p last_used_layout
#: }}}

#: Font sizes {{{

#: You can change the font size for all top-level kitty OS windows at
#: a time or only the current one.
# map kitty_mod+equal     change_font_size all +1.0
map kitty_mod+equal     change_font_size current +1.0
map kitty_mod+minus     change_font_size current -1.0
map kitty_mod+backspace change_font_size current 0
map kitty_mod+f7 change_font_size current 10.0

#use mod+r to resize
#map kitty_mod+left resize_window narrower
#map kitty_mod+right resize_window wider
#map kitty_mod+up resize_window taller
#map kitty_mod+down resize_window shorter

#: To setup shortcuts for specific font sizes::

#:     map kitty_mod+f6 change_font_size all 10.0

#: To setup shortcuts to change only the current OS window's font
#: size::

#:     map kitty_mod+f6 change_font_size current 10.0
#: }}}

#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

map kitty_mod+e kitten hints

#: Open a currently visible URL using the keyboard. The program used
#: to open the URL is specified in open_url_with.

map kitty_mod+p>f kitten hints --type path --program -

#: Select a path/filename and insert it into the terminal. Useful, for
#: instance to run git commands on a filename output from a previous
#: git command.

map kitty_mod+p>shift+f kitten hints --type path

#: Select a path/filename and open it with the default open program.

map kitty_mod+p>l kitten hints --type line --program -

#: Select a line of text and insert it into the terminal. Use for the
#: output of things like: ls -1

map kitty_mod+p>w kitten hints --type word --program -

#: Select words and insert into terminal.

map kitty_mod+p>h kitten hints --type hash --program -

#: Select something that looks like a hash and insert it into the
#: terminal. Useful with git, which uses sha1 hashes to identify
#: commits

map kitty_mod+p>n kitten hints --type linenum

#: Select something that looks like filename:linenum and open it in
#: vim at the specified line number.


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see kittens/hints.
#: }}}

#: Miscellaneous {{{

map kitty_mod+f11    toggle_fullscreen
map kitty_mod+f10    toggle_maximized
map kitty_mod+u      kitten unicode_input
map kitty_mod+f2     edit_config_file
map kitty_mod+escape kitty_shell window

#: Open the kitty shell in a new window/tab/overlay/os_window to
#: control kitty using commands.

map kitty_mod+a>m    set_background_opacity +0.1
map kitty_mod+a>l    set_background_opacity -0.1
map kitty_mod+a>1    set_background_opacity 1
map kitty_mod+a>d    set_background_opacity default
map kitty_mod+delete clear_terminal reset active

map kitty_mod+f3     create_marker
map kitty_mod+ctrl+f3     remove_marker

# note \x1b is 27 aka: <esc>
# ctl  \x11
# ^P   \x10
# \ (leader) \x5c

# vim config

map kitty_mod+s send_text application \x1b:w\n
map kitty_mod+p send_text application \x1b:Clap files\n
map kitty_mod+shift+p send_text application \x1b:Clap filer\n
map kitty_mod+f send_text application \x1b:Clap grep  ++query=<cword>\n
map kitty_mod+shift+f send_text application \x1b:Clap grep2  ++query=<cword>\n
# <leader>c<space> for nerdcommenter
map kitty_mod+/ send_text application \\c\x20
map kitty_mod+shift+c send_text application \x1b:Clap\n
" map kitty_mod+ctrl+c send_text application \x1b:CocList\n
map kitty_mod+shift+b send_text application \x1b:Clap buffers\n


# Clipboard
# map super+v             paste_from_clipboard
# map ctrl+shift+s        paste_from_selection
# map super+c             copy_to_clipboard
# map shift+insert        paste_from_selection

# Scrolling
# map ctrl+shift+up        scroll_line_up
# map ctrl+shift+down      scroll_line_down
# map ctrl+shift+k         scroll_line_up
# map ctrl+shift+j         scroll_line_down
# map ctrl+shift+page_up   scroll_page_up
# map ctrl+shift+page_down scroll_page_down
# map ctrl+shift+home      scroll_home
# map ctrl+shift+end       scroll_end
# map ctrl+shift+h         show_scrollback

# Window management
# map super+n             new_os_window
# map super+w             close_window
# map ctrl+shift+enter    new_window
# map ctrl+shift+]        next_window
# map ctrl+shift+[        previous_window
# map ctrl+shift+f        move_window_forward
# map ctrl+shift+b        move_window_backward
# map ctrl+shift+`        move_window_to_top
# map ctrl+shift+1        first_window
# map ctrl+shift+2        second_window
# map ctrl+shift+3        third_window
# map ctrl+shift+4        fourth_window
# map ctrl+shift+5        fifth_window
# map ctrl+shift+6        sixth_window
# map ctrl+shift+7        seventh_window
# map ctrl+shift+8        eighth_window
# map ctrl+shift+9        ninth_window
# map ctrl+shift+0        tenth_window

# Tab management
# map ctrl+shift+right    next_tab
# map ctrl+shift+left     previous_tab
# map ctrl+shift+t        new_tab
# map ctrl+shift+q        close_tab
# map ctrl+shift+l        next_layout
# map ctrl+shift+.        move_tab_forward
# map ctrl+shift+,        move_tab_backward

# Miscellaneous
# map ctrl+shift+=      increase_font_size
# map ctrl+shift+-    decrease_font_size
# map ctrl+shift+backspace restore_font_size

# Symbol mapping (special font for specified unicode code points). Map the
# specified unicode codepoints to a particular font. Useful if you need special
# rendering for some symbols, such as for Powerline. Avoids the need for
# patched fonts. Each unicode code point is specified in the form U+<code point
# in hexadecimal>. You can specify multiple code points, separated by commas
# and ranges separated by hyphens. symbol_map itself can be specified multiple times.
# Syntax is:
#
# symbol_map codepoints Font Family Name
#
# For example:
#
#symbol_map U+E0A0-U+E0A2,U+E0B0-U+E0B3 PowerlineSymbols
hide_window_decorations no
# macos_option_as_alt no

# Change the color of the kitty window's titlebar on macOS. A value of "system"
# means to use the default system color, a value of "background" means to use
# the default background color and finally you can use an arbitrary color, such
# as #12af59 or "red".
# macos_titlebar_color background

allow_remote_control yes
# xterm-new
listen_on unix:/tmp/mykitty
# infocmp -x
# kf13-kf24 are shift F1-F12
# shift + fn mapped to  KF13 ~ KF24
# ctrl + fn mapped to 
# ^[ = <exc> = \E

# map shift+enter send_text all \x1b[13;2u
# map ctrl+enter send_text all \x1b[13;5u
# map shift+F1 send_text all \E[1;2P
# map shift+F2 send_text all \x1b[[1;2Q
# map shift+F3 send_text all \x1b[[1;2R
# map shift+F4 send_text all \x1b[[1;2S

# enabled_layouts tall:bias=70;full_size=2