# Fira Code Medium/Retina Input Mono Medium/SemiBold Cascadia Code PL Regular Input Mono Narrow Medium   Input Mono Narrow Bold/Medium
# Ligconsolata Medium #Victor Mono SemiBold JetBrains Mono ExtraBold Italic
##Fira Code Retina JetBrains Mono Source code Pro Input Mono Narrow Medium
#
# font_family      JetBrainsMono Nerd Font
# italic_font      JetBrainsMono Nerd Font
#font_family Hack
# Mac
# font_family      VictorMono Nerd Font Semibold
# italic_font      VictorMono Nerd Font Semibold Italic
# bold_font        VictorMono Nerd Font Bold
# bold_italic_font VictorMono Nerd Font Bold Italic
# Linux
font_family      Victor Mono Medium
# font_family      Monaspace Neon Regular
italic_font      Victor Mono Medium Italic
bold_font        Victor Mono Bold
bold_italic_font Victor Mono Bold Italic

# JetBrainsMono Extra Bold  # Victor Mono Bold
# check result with:  echo -e "\nnormal flower\n\e[1mboldflower\e[0m\n\e[3mitalic flower\e[0m\n\e[3m\e[1mbold italic flower\e[0m\n\e[4munderline flower\e[0m\n\e[9mstrikethrough flower\e[0m\n\e[4:3mcurly underline flower\e[4:0m\n\e[4:3\e[58:mcurlyunderlinewithcolor flower\e[59m\e[4:0m"
# Font size (in pts)
font_size        16.0
# less sapace and more space for text
# adjust_line_height  96%
adjust_column_width 110%
# for italic
# box_drawing_scale 0.001, 1, 1.5, 2
modify_font underline_position 2, 10
modify_font underline_thickness 120%
modify_font strikethrough_position 2px
# The interval between successive clicks to detect double/triple clicks (in seconds)
click_interval 0.5
# Draw an extra border around the font with the given width
macos_thicken_font 0.20
macos_custom_beam_cursor yes

# snazzy OceanicMaterial.conf, or JetB_Darcula
include ./theme.conf
background_opacity 0.88

#Allow changing of the background_opacity dynamically
dynamic_background_opacity yes


# background_image $HOME/photos/smoke-662747.png

#  much to dim text that has the DIM/FAINT attribute set
# dim_opacity 1

# Whether to tile or scale the background image.#scaled tiled
# background_image_layout scaled
# background_image_linear yes
# background_tint 0.8
# The cursor shape can be one of (block, beam, underline)
# cursor #fc9c8c
# cursor_text_color #111111

cursor_shape     block
cursor_beam_thickness 3

# selection_background #8f3a7d

# The interval (in seconds) at which to blink the cursor. Set to zero to
# disable blinking.
cursor_blink_interval     0.8

# Stop blinking cursor after the specified number of seconds of keyboard inactivity. Set to
# zero or a negative number to never stop blinking.
cursor_stop_blinking_after 20.0

# Number of lines of history to keep in memory for scrolling back
scrollback_lines 10000

# Program with which to view scrollback in a new window. The scrollback buffer is passed as
# STDIN to this program. If you change it, make sure the program you use can
# handle ANSI escape sequences for colors and text formatting.
# scrollback_pager neovim
# scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER


scrollback_pager nvim -u NONE -R -M -c 'lua require("core.kitty_page")(INPUT_LINE_NUMBER, CURSOR_LINE, CURSOR_COLUMN)' -
# scrollback_pager nvim -u NONE -c "set nonumber nolist showtabline=0 foldcolumn=0" -c "autocmd TermOpen * normal G" -c "map q :qa!<CR>" -c "set clipboard+=unnamedplus" -c "silent write! /tmp/kitty_scrollback_buffer | te cat /tmp/kitty_scrollback_buffer - "


# Wheel scroll multiplier (modify the amount scrolled by the mouse wheel)
wheel_scroll_multiplier 5.0

# Characters considered part of a word when double clicking. In addition to these characters
# any character that is marked as an alpha-numeric character in the unicode
# database will be matched.
select_by_word_characters :@-./_~?&=%+#

# Hide mouse cursor after the specified number of seconds of the mouse not being used. Set to
# zero or a negative number to disable mouse cursor hiding.
mouse_hide_wait 10.0

detect_urls yes
# url_color #20c7fd
url_style curly

copy_on_select yes

click_interval -1.0
focus_follows_mouse yes

pointer_shape_when_grabbed arrow
pointer_shape_when_dragging hand
# active_border_color #00bf00

inactive_text_alpha 0.8

# The enabled window layouts. A comma separated list of layout names. The special value * means
# all layouts. The first listed layout will be used as the startup layout.
# For a list of available layouts, see the file layouts.py
enabled_layouts splits:split_axis=horizontal

# If enabled, the window size will be remembered so that new instances of kitty will have the same
# size as the previous instance. If disabled, the window will initially have size configured
# by initial_window_width/height, in pixels.
remember_window_size   yes
initial_window_width   1440
initial_window_height  864

# Delay (in milliseconds) between screen updates. Decreasing it, increases fps
# at the cost of more CPU usage. The default value yields ~100fps which is more
# that sufficient for most uses.
# repaint_delay    10
repaint_delay    10

# Delay (in milliseconds) before input from the program running in the terminal
# is processed. Note that decreasing it will increase responsiveness, but also
# increase CPU usage and might cause flicker in full screen programs that
# redraw the entire screen on each loop, because kitty is so fast that partial
# screen updates will be drawn.
input_delay 3

sync_to_monitor false
# Visual bell duration. Flash the screen when a bell occurs for the specified number of
# seconds. Set to zero to disable.
visual_bell_duration 0.0

# Enable/disable the audio bell. Useful in environments that require silence.
enable_audio_bell yes

# The modifier keys to press when clicking with the mouse on URLs to open the URL
open_url_modifiers ctrl+shift

# The program with which to open URLs that are clicked on. The special value "default" means to
# use the operating system's default URL handler.
open_url_with default

# The value of the TERM environment variable to set
# term xterm-kitty
# term kitty
# term xterm-256color

# The width (in pts) of window borders. Will be rounded to the nearest number of pixels based on screen resolution.

window_margin_width 0.0

window_border_width 0.2

window_margin_width 0.1

window_padding_width 0
draw_minimal_borders yes


# The color for the border of the active window
# active_border_color #efefef

# The color for the border of inactive windows
# inactive_border_color #7c7c7c

tab_bar_style powerline

# Tab-bar colors
# active_tab_foreground #000
# active_tab_background #eee
# inactive_tab_foreground #444
# inactive_tab_background #999

macos_hide_from_tasks no
macos_quit_when_last_window_closed yes


# Key mapping
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html
# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.

kitty_mod super

# map f1 launch vim path/to/some/file

clear_all_shortcuts yes
map kitty_mod+c copy_to_clipboard

#: There is also a copy_or_interrupt action that can be optionally
#: mapped to Ctrl+c. It will copy only if there is a selection and
#: send an interrupt otherwise. Similarly, copy_and_clear_or_interrupt
#: will copy and clear the selection or send an interrupt if there is
#: no selection.

map kitty_mod+v  paste_from_clipboard
map kitty_mod+s  paste_from_selection
map kitty_mod+alt+v  paste_from_clipboard
map kitty_mod+alt+s  paste_from_selection
map shift+insert paste_from_selection
map kitty_mod+o  pass_selection_to_program

#: You can also pass the contents of the current selection to any
#: program using pass_selection_to_program. By default, the system's
#: open program is used, but you can specify your own, the selection
#: will be passed as a command line argument to the program, for
#: example::

#:     map kitty_mod+o pass_selection_to_program firefox

#: You can pass the current selection to a terminal program running in
#: a new kitty window, by using the @selection placeholder::

#:     map kitty_mod+y new_window less @selection

#: }}}

#: Scrolling {{{

map kitty_mod+up        scroll_line_up
map kitty_mod+k         scroll_line_up
map kitty_mod+down      scroll_line_down
map kitty_mod+j         scroll_line_down
map kitty_mod+page_up   scroll_page_up
map kitty_mod+page_down scroll_page_down
map kitty_mod+alt+k   scroll_page_up
map kitty_mod+alt+j   scroll_page_down
map kitty_mod+home      scroll_home
map kitty_mod+end       scroll_end

# open pager with vim

map kitty_mod+shift+f3  show_scrollback
map kitty_mod+ctrl+f3   show_scrollback

# map kitty_mod+h launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay /usr/local/bin/nvim -c "normal G" -c "set nonumber nolist" -
# map kitty_mod+shift+h   launch --stdin-source=@screen_scrollback --stdin-add-formatting --copy-colors --type=tab --title="scrollback search" /usr/local/bin/nvim -c "setl filetype=terminal" -
# if you want this in vim need install Improved AnsiEsc or export PAGER="vim -R +AnsiEsc"
# map kitty_mod+shift+h   launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay /usr/local/bin/vim -c "normal G" -c "set nonumber nolist" -
# map kitty_mod+shift+h launch --stdin-source=@screen_scrollback --stdin-add-formatting less +G -R

#: You can pipe the contents of the current screen + history buffer as
#: STDIN to an arbitrary program using the ``launch`` function. For
#: example, the following opens the scrollback buffer in less in an
#: overlay window::

#:     map f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R

#: For more details on piping screen and buffer contents to external
#: programs, see launch.

#: }}}

#: Window management {{{

map kitty_mod+enter new_os_window_with_cwd

#: You can open a new window running an arbitrary program, for
#: example::

#:     map kitty_mod+y      launch mutt

#: You can open a new window with the current working directory set to
#: the working directory of the current window using::

#:     map ctrl+alt+enter    launch --cwd=current

#: You can open a new window that is allowed to control kitty via the
#: kitty remote control facility by prefixing the command line with @.
#: Any programs running in that window will be allowed to control
#: kitty. For example::

#:     map ctrl+enter launch --allow-remote-control some_program

#: You can open a new window next to the currently active window or as
#: the first window, with::

#:     map ctrl+n launch --location=neighbor some_program
#:     map ctrl+f launch --location=first some_program

#: For more details, see launch.

map kitty_mod+n new_os_window

#: Works like new_window above, except that it opens a top level OS
#: kitty window. In particular you can use new_os_window_with_cwd to
#: open a window with the current working directory.

map kitty_mod+F4 launch --cwd=current --location=hsplit
map kitty_mod+F5 detach_window   # this is voice over in mac
# map kitty_mod+F6 launch --cwd=current --location=vsplit
map kitty_mod+F7 launch --cwd=current --location=vsplit
# map kitty_mod+F8 detach_tab

map kitty_mod+F8 layout_action rotate

map kitty_mod+shift+up move_window up
map kitty_mod+shift+left move_window left
map kitty_mod+shift+right move_window right
map kitty_mod+shift+down move_window down

map kitty_mod+ctrl+left neighboring_window left
map kitty_mod+ctrl+right neighboring_window right
map kitty_mod+ctrl+up neighboring_window up
map kitty_mod+ctrl+down neighboring_window down

# map kitty_mod+w close_window
map kitty_mod+] next_window
map kitty_mod+[ previous_window
# map kitty_mod+ctrl+] next_window
# map kitty_mod+ctrl+[ previous_window
#map kitty_mod+f move_window_forward
#map kitty_mod+b move_window_backward
#map kitty_mod+` move_window_to_top
map kitty_mod+r start_resizing_window
map kitty_mod+1 first_window
map kitty_mod+2 second_window
map kitty_mod+3 third_window
map kitty_mod+4 fourth_window
map kitty_mod+5 fifth_window
map kitty_mod+6 sixth_window
#map kitty_mod+7 seventh_window
#map kitty_mod+8 eighth_window
#map kitty_mod+9 ninth_window
#map kitty_mod+0 tenth_window
#: }}}

#: Tab management {{{
# Mac
map kitty_mod+right next_tab
map kitty_mod+left  previous_tab
#linux/KDE
# map kitty_mod+ctrl+right next_tab
# map kitty_mod+ctrl+left  previous_tab
map kitty_mod+t     new_tab_with_cwd
map kitty_mod+q     close_tab
map kitty_mod+.     move_tab_forward
map kitty_mod+,     move_tab_backward
map kitty_mod+alt+t set_tab_title

#: You can also create shortcuts to go to specific tabs, with 1 being
#: the first tab, 2 the second tab and -1 being the previously active
#: tab, and any number larger than the last tab being the last tab::

#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2

#: Just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and use
#: new_tab_with_cwd. Finally, if you want the new tab to open next to
#: the current tab rather than at the end of the tabs list, use::

#:     map ctrl+t new_tab !neighbor [optional cmd to run]
#: }}}

#: Layout management {{{

map kitty_mod+l next_layout

#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:    map ctrl+alt+p last_used_layout
#: }}}

#: Font sizes {{{

#: You can change the font size for all top-level kitty OS windows at
#: a time or only the current one.
# map kitty_mod+equal     change_font_size all +1.0
map kitty_mod+equal     change_font_size current +1.0
map kitty_mod+minus     change_font_size current -1.0
map kitty_mod+backspace change_font_size current 0
map kitty_mod+f9 change_font_size current 10.0

#use mod+r to resize
#map kitty_mod+left resize_window narrower
#map kitty_mod+right resize_window wider
#map kitty_mod+up resize_window taller
#map kitty_mod+down resize_window shorter

#: To setup shortcuts for specific font sizes::

#:     map kitty_mod+f6 change_font_size all 10.0

#: To setup shortcuts to change only the current OS window's font
#: size::

#:     map kitty_mod+f6 change_font_size current 10.0
#: }}}

#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

map kitty_mod+e kitten hints

#: Open a currently visible URL using the keyboard. The program used
#: to open the URL is specified in open_url_with.

map kitty_mod+p>f kitten hints --type path --program -

#: Select a path/filename and insert it into the terminal. Useful, for
#: instance to run git commands on a filename output from a previous
#: git command.

map kitty_mod+p>shift+f kitten hints --type path

#: Select a path/filename and open it with the default open program.

map kitty_mod+p>l kitten hints --type line --program -

#: Select a line of text and insert it into the terminal. Use for the
#: output of things like: ls -1

map kitty_mod+p>w kitten hints --type word --program -

#: Select words and insert into terminal.

map kitty_mod+p>h kitten hints --type hash --program -

#: Select something that looks like a hash and insert it into the
#: terminal. Useful with git, which uses sha1 hashes to identify
#: commits

map kitty_mod+p>n kitten hints --type linenum

#: Select something that looks like filename:linenum and open it in
#: vim at the specified line number.


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see kittens/hints.
#: }}}

#: Miscellaneous {{{

map kitty_mod+f11    toggle_fullscreen
map kitty_mod+f10    toggle_maximized
map kitty_mod+u      kitten unicode_input
map kitty_mod+f2     edit_config_file
map kitty_mod+escape kitty_shell window

#: Open the kitty shell in a new window/tab/overlay/os_window to
#: control kitty using commands.

map kitty_mod+a>m    set_background_opacity +0.1
map kitty_mod+a>l    set_background_opacity -0.1
map kitty_mod+a>1    set_background_opacity 1
map kitty_mod+a>d    set_background_opacity default
map kitty_mod+delete clear_terminal reset active

map kitty_mod+f3     create_marker
map kitty_mod+ctrl+f3     remove_marker

# note \x1b is 27 aka: <esc>
# ctl  \x11
# ^P   \x10
# \ (leader) \x5c

# vim config

# map kitty_mod+s send_text application \x1b:w\n
map kitty_mod+s send_text all :execute "normal \<d-s>"\r
map kitty_mod+p send_text all :execute "normal \<d-p>"\r
map kitty_mod+f send_text all :execute "normal \<d-f>"\r
map kitty_mod+w send_text all :execute "normal \<d-w>"\r
# map kitty_mod+f send_text application \x85\x29
# kitty +kitten show_keys
# map kitty_mod+f send_text all  \x1bf
map kitty_mod+shift+f send_text all  \x1bF
map kitty_mod+shift+p send_text all :execute "normal \<d-P>"\r
# map kitty_mod+shift+f send_text all :execute "normal \d-F>"\r
# rmal \<d-T>""
map kitty_mod+shift+t send_text all :execute "normal \<d-T>"\r
## https://www.quickmacros.com/help/Tables/IDP_VIRTUALKEYS.html
# map kitty_mod+/ send_text application \x80\xfc\x80\/
map kitty_mod+/ send_text application \\c\x20
# map kitty_mod+/ send_text application gcc
# map kitty_mod+/ send_text all :execute "normal gcc"\r

# map kitty_mod+/ send_text application gcc
# \x80\xfc\x80\/
#\\c\x20
map kitty_mod+shift+c send_text all :execute "normal \<d-C>"\r
map kitty_mod+shift+b send_text all :execute "normal \<d-B>"\r
map kitty_mod+shift+h send_text all :execute "normal \<d-H>"\r

# map kitty_mod+w combine | send_text application \x1b:wqa!\n | send_text normal exit\n
# map kitty_mod+w combine | send_text application \x1b:wqa!\n | close_os_window\n
# map kitty_mod+w combine | send_text application \x1b:wqa!\n | detach_window | close_tab

# map kitty_mod+w combine | send_text all :execute "normal \<d-w>"\r | close_tab
map kitty_mod+w combine | send_text all :execute "normal \<m-w>"\r | close_tab
# map kitty_mod+w combine | send_text application \x3\x1b\x77 | close_tab

# map kitty_mod+shift+e combine | detach_window | close_tab

#Clap files
# map kitty_mod+p send_text application \x1b:Telescope git_files \n
# map kitty_mod+p send_text application \x1b:ProjFiles \n
# map kitty_mod+p send_text application \x1b:Clap files\n
# map kitty_mod+shift+e combine | detach_window | close_tab
# map kitty_mod+f send_text application \x1b:Rg  ++query=<cword>\n
# map kitty_mod+shift+p send_text application \x1b:Clap filer\n
# \x1b:Clap grep  ++query=<cword>\n  \x1b:Telescope grep_string  ++query=<cword>\n
# map kitty_mod+shift+f send_text application \x1byaw:Telescope live_grep\n
# map kitty_mod+f send_text application \x1b:Clap grep ++query=<cword>\n
# map kitty_mod+shift+f send_text application \x1b:Clap dumb_jump ++query=<cword>\n
# map kitty_mod+shift+f send_text application \x1b:Clap grep2 ++query=<cword>\n
# <leader>c<space> for nerdcommenter
# comment out block
# map kitty_mod+/ send_text application \\c\x20
# map kitty_mod+shift+c send_text application \x1b:Clap\n
# map kitty_mod+ctrl+c send_text application \x1b:CocList\n
# map kitty_mod+shift+b send_text application \x1b:Clap buffers\n
# map kitty_mod+shift+h send_text application \x1b:Clap command_history\n


map alt+left send_text all \x1b\x62
map alt+right send_text all \x1b\x66


# Clipboard
# map super+v             paste_from_clipboard
# map ctrl+shift+s        paste_from_selection
# map super+c             copy_to_clipboard
# map shift+insert        paste_from_selection

# Scrolling
# map ctrl+shift+up        scroll_line_up
# map ctrl+shift+down      scroll_line_down
# map ctrl+shift+k         scroll_line_up
# map ctrl+shift+j         scroll_line_down
# map ctrl+shift+page_up   scroll_page_up
# map ctrl+shift+page_down scroll_page_down
# map ctrl+shift+home      scroll_home
# map ctrl+shift+end       scroll_end
# map ctrl+shift+h         show_scrollback

# Window management
# map super+n             new_os_window
# map super+w             close_window
# map ctrl+shift+enter    new_window
# map ctrl+shift+]        next_window
# map ctrl+shift+[        previous_window
# map ctrl+shift+f        move_window_forward
# map ctrl+shift+b        move_window_backward
# map ctrl+shift+`        move_window_to_top
# map ctrl+shift+1        first_window
# map ctrl+shift+2        second_window
# map ctrl+shift+3        third_window
# map ctrl+shift+4        fourth_window
# map ctrl+shift+5        fifth_window
# map ctrl+shift+6        sixth_window
# map ctrl+shift+7        seventh_window
# map ctrl+shift+8        eighth_window
# map ctrl+shift+9        ninth_window
# map ctrl+shift+0        tenth_window

# Tab management
# map ctrl+shift+right    next_tab
# map ctrl+shift+left     previous_tab
# map ctrl+shift+t        new_tab
# map ctrl+shift+q        close_tab
# map ctrl+shift+l        next_layout
# map ctrl+shift+.        move_tab_forward
# map ctrl+shift+,        move_tab_backward

# Miscellaneous
# map ctrl+shift+=      increase_font_size
# map ctrl+shift+-    decrease_font_size
# map ctrl+shift+backspace restore_font_size

# Symbol mapping (special font for specified unicode code points). Map the
# specified unicode codepoints to a particular font. Useful if you need special
# rendering for some symbols, such as for Powerline. Avoids the need for
# patched fonts. Each unicode code point is specified in the form U+<code point
# in hexadecimal>. You can specify multiple code points, separated by commas
# and ranges separated by hyphens. symbol_map itself can be specified multiple times.
# Syntax is:
#
# symbol_map codepoints Font Family Name
#
# For example:
#
# symbol_map U+E008,U+E5F6-U+E630,U+E700-U+E740,U+E770-U+E7B0,U+EAB4,U+F4A5,U+E0A0-U+E0A2,U+E0B0-U+E0A0,U+E22C,U+E5F0-U+E5FF,U+E612-U+E627,U+E725,U+E77F-U+E786,U+E799-U+E7A1,U+EB61-U+EBD0,U+F2A0-U+F310,U+F43D-U+F449,U+F460-U+F500,U+F480-U+F4C0 Symbols Nerd Font Mono
# U+E633,U+E786,U+EAB6,U+F449,U+F47C
symbol_map U+E008,U+E22C,U+E257,U+E5F0-U+E640,U+E6B0-U+E6BF,U+E702-U+E736,U+E770-U+E7A2,U+EA70,U+EAB0-U+EADD,U+EAE0-U+EAEF,U+EB36,U+EB5F,U+EB30-U+EB90,U+EBC4-U+EBDE,U+F120-U+F1BB,U+F270-U+F286,U+F2A6,U+F30C,U+F42E,U+F43F-U+F48A,U+F4A5,U+F4B5,U+F4F0 Symbols Nerd Font Mono
hide_window_decorations no
# enable <m-key> in vim
macos_option_as_alt yes

# Change the color of the kitty window's titlebar on macOS. A value of "system"
# means to use the default system color, a value of "background" means to use
# the default background color and finally you can use an arbitrary color, such
# as #12af59 or "red".
# macos_titlebar_color background

allow_remote_control socket
# xterm-new
listen_on unix:/tmp/mykitty
# listen_on  unix:@mykitty
# infocmp -x
# kf13-kf24 are shift F1-F12
# shift + fn mapped to  KF13 ~ KF24
# ctrl + fn mapped to
# ^[ = <exc> = \E

# map shift+enter send_text all \x1b[13;2u
# map ctrl+enter send_text all \x1b[13;5u
# map shift+F1 send_text all \E[1;2P
# map shift+F2 send_text all \x1b[[1;2Q
# map shift+F3 send_text all \x1b[[1;2R
# map shift+F4 send_text all \x1b[[1;2S


#: Reload kitty.conf

map kitty_mod+f8 load_config_file
map kitty_mod+,   load_config_file

#::  Reload kitty.conf, applying any changes since the last time it
#::  was loaded. Note that a handful of settings cannot be dynamically
#::  changed and require a full restart of kitty.  You can also map a
#::  keybinding to load a different config file, for example::

#::      map f5 load_config /path/to/alternative/kitty.conf

#::  Note that all setting from the original kitty.conf are discarded,
#::  in other words the new conf settings *replace* the old ones.

#: Debug kitty configuration

map kitty_mod+f6 debug_config
map opt+cmd+f6    debug_config

#::  Show details about exactly what configuration kitty is running
#::  with and its host environment. Useful for debugging issues.

#: Send arbitrary text on key presses

#::  E.g. map ctrl+shift+alt+h send_text all Hello World

#::  You can tell kitty to send arbitrary (UTF-8) encoded text to the
#::  client program when pressing specified shortcut keys. For
#::  example::

#::      map ctrl+alt+a send_text all Special text

#::  This will send "Special text" when you press the ctrl+alt+a key
#::  combination.  The text to be sent is a python string literal so
#::  you can use escapes like \x1b to send control codes or \u21fb to
#::  send unicode characters (or you can just input the unicode
#::  characters directly as UTF-8 text). The first argument to
#::  send_text is the keyboard modes in which to activate the
#::  shortcut. The possible values are normal or application or kitty
#::  or a comma separated combination of them.  The special keyword
#::  all means all modes. The modes normal and application refer to
#::  the DECCKM cursor key mode for terminals, and kitty refers to the
#::  special kitty extended keyboard protocol.

#::  Another example, that outputs a word and then moves the cursor to
#::  the start of the line (same as pressing the Home key)::

#::      map ctrl+alt+a send_text normal Word\x1b[H
#::      map ctrl+alt+a send_text application Word\x1bOH

#: }}}

#: }}}


# enabled_layouts tall:bias=70;full_size=2


# kitten
action_alias kitty_scrollback_nvim kitten ~/.local/share/nvim/lazy/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py --nvim-args --clean --noplugin -n
map kitty_mod+h kitty_scrollback_nvim
map kitty_mod+g kitty_scrollback_nvim --config ksb_builtin_last_cmd_output
# Show clicked command output in nvim
mouse_map ctrl+shift+right press ungrabbed combine : mouse_select_command_output : kitty_scrollback_nvim --config ksb_builtin_last_visited_cmd_output
map kitty_mod+shift+/      launch --allow-remote-control kitty +kitten kitty_search/search.py @active-kitty-window-id
# map kitty_mod+ctrl+/      launch --location=hsplit --allow-remote-control kitty +kitten search.py @active-kitty-window-id

# BEGIN_KITTY_THEME
# Material
include current-theme.conf
shell_integration enable
# END_KITTY_THEME
