" let s:config_home = stdpath('config')
" source /Users/ray.xu/.config/nvim/pluginrc.d/lsp.vim
" 
" let g:deoplete#enable_at_startup = 1
" set cmdheight=2
" let g:echodoc#enable_at_startup = 1
" let g:echodoc#type = 'floating'
" set ttymouse=xterm2
" set mouse=a
" --local nvim_lsp = require('lspconfig')
" --require('lsp_signature').on_attach()
" 
" -- require('lsp_config')  -- you may need my lsp_config.lua
" 
" -- local sumneko_root_path = vim.fn.expand("$HOME")..'/github/sumneko/lua-language-server'
" -- local sumneko_binary = vim.fn.expand("$HOME")..'/github/sumneko/lua-language-server/bin/macOS/lua-language-server'
" -- local on_attach = function(client, bufnr)
" -- require'lsp_signature'.on_attach()
" -- end
" 
" -- require'lspconfig'.sumneko_lua.setup {
" -- cmd = {sumneko_binary, "-E", sumneko_root_path .. "/main.lua"};
" -- on_attach = on_attach,
" -- }
" -- 
" -- require'compe'.setup {
" --   enabled = true;
" --   autocomplete = true;
" --   debug = false;
" --   min_length = 1;
" --   preselect = 'enable';
" --   throttle_time = 80;
" --   source_timeout = 200;
" --   incomplete_delay = 400;
" --   max_abbr_width = 100;
" --   max_kind_width = 100;
" --   max_menu_width = 100;
" --   documentation = true;
" -- 
" --   source = {
" --     nvim_lsp = true;
" --     vsnip = true;
" --   };
" -- }
" -- 
" -- "glepnir/lspsaga.nvim",
" -- local saga = require 'lspsaga'
" 
" -- Only if your version of Neovim doesn't have https://github.com/neovim/neovim/pull/12632 merged
" -- vim._update_package_paths()
"  --"hrsh7th/nvim-compe",

"  -- Document highlight
"  if client.resolved_capabilities.document_highlight then
"    vim.api.nvim_exec(
"      [[
"        hi LspReferenceRead cterm=bold ctermbg=239 guibg=#504945
"        hi LspReferenceText cterm=bold ctermbg=239 guibg=#504945
"        hi LspReferenceWrite cterm=bold ctermbg=243 guibg=#7c6f64
"        augroup lsp_document_highlight
"          autocmd! * <buffer>
"          autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight()
"          autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
"        augroup END
"      ]],
"      false
"    )
"  end
set mouse=a

lua <<EOF
vim.cmd [[packadd packer.nvim]]
require('packer').startup(function()
use {
"wbthomason/packer.nvim",
"neovim/nvim-lspconfig",
-- "hrsh7th/nvim-compe",
"/Users/ray.xu/github/lsp_signature.nvim",
"nvim-lua/completion-nvim",
-- "ray-x/lsp_signature.nvim",
}
end)

local lspconfig = require('lspconfig')

-- require'compe'.setup {
--   enabled = true;
--   autocomplete = true;
--   debug = false;
--   min_length = 1;
--   preselect = 'enable';
--   throttle_time = 80;
--   source_timeout = 200;
--   incomplete_delay = 400;
--   max_abbr_width = 100;
--   max_kind_width = 100;
--   max_menu_width = 100;
--   documentation = true;
-- 
--   source = {
--     nvim_lsp = true;
--     vsnip = true;
--   };
-- }
--   require "completion".on_attach(client)

require "lsp_signature".on_attach(client)

local on_attach = function(client, bufnr)
  print(vim.inspect(client.resolved_capabilities))
  -- vim.lsp.utils.opt("omnifunc", "v:lua.vim.lsp.omnifunc")

  local lsp_keymappings = {
    {"n", "gd", "<cmd>lua vim.lsp.buf.definition()<CR>"},
    {"n", "gD", "<Cmd>lua vim.lsp.buf.declaration()<CR>"},
    {"n", "gi", "<cmd>lua vim.lsp.buf.implementation()<CR>"},
    {"n", "<leader>f", "<cmd>lua vim.lsp.buf.formatting()<CR>"},
    {"n", "<leader>td", "<cmd>lua vim.lsp.buf.type_definition()<CR>"},
    {"n", "<leader>rf", "<cmd>lua vim.lsp.buf.references()<CR>"},
    {"n", "<leader>ll", "<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>"},
    -- Use <Tab> and <S-Tab> to navigate through popup menu
    {"i", "<Tab>", 'pumvisible() ? "\\<C-n>" : "\\<Tab>"', {expr = true}},
    {"i", "<S-Tab>", 'pumvisible() ? "\\<C-p>" : "\\<Tab>"', {expr = true}}
  }

  for _, map in ipairs(lsp_keymappings) do
    local mode, lhs, rhs, opts = unpack(map)
    -- utils.map(mode, lhs, rhs, opts)
  end

  -- Format on save
  if client.resolved_capabilities.document_formatting then
    vim.cmd [[autocmd BufWritePre * lua vim.lsp.buf.formatting()]]
  end


end

lspconfig.pyls.setup {
  on_attach = on_attach
}

-- require('lspconfig').intelephense.setup{
-- 	--on_attach = on_attach
-- }

EOF

let g:min_load = 1